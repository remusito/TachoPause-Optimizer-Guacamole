{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/loads/edit/[id]",
      "regex": "^/loads/edit/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/loads/edit/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/loads/[id]",
      "regex": "^/loads/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/loads/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/dashboard/maintenance/tires",
      "regex": "^/dashboard/maintenance/tires(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/maintenance/tires(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/history",
      "regex": "^/history(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/history(?:/)?$"
    },
    {
      "page": "/loads",
      "regex": "^/loads(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/loads(?:/)?$"
    },
    {
      "page": "/loads/add",
      "regex": "^/loads/add(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/loads/add(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/maintenance",
      "regex": "^/maintenance(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/maintenance(?:/)?$"
    },
    {
      "page": "/privacy-policy",
      "regex": "^/privacy\\-policy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy\\-policy(?:/)?$"
    },
    {
      "page": "/regulations",
      "regex": "^/regulations(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/regulations(?:/)?$"
    },
    {
      "page": "/rewards",
      "regex": "^/rewards(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/rewards(?:/)?$"
    },
    {
      "page": "/route-calculator",
      "regex": "^/route\\-calculator(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/route\\-calculator(?:/)?$"
    },
    {
      "page": "/route-optimizer",
      "regex": "^/route\\-optimizer(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/route\\-optimizer(?:/)?$"
    },
    {
      "page": "/speedometer",
      "regex": "^/speedometer(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/speedometer(?:/)?$"
    },
    {
      "page": "/stats",
      "regex": "^/stats(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/stats(?:/)?$"
    },
    {
      "page": "/telephones",
      "regex": "^/telephones(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/telephones(?:/)?$"
    },
    {
      "page": "/terms-of-service",
      "regex": "^/terms\\-of\\-service(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms\\-of\\-service(?:/)?$"
    },
    {
      "page": "/workday",
      "regex": "^/workday(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/workday(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}